<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA3nVcAO5tTADvdFQA53ddAO12XADkeF4A8nleAPd7XQDxfV0A131lANp6YgDjfWQA6ntiAO56
        YQDofGEA7nxjAOh+ZADtfWUA635oAPF5YAD2fGEA839mAPV+ZQD5fWMA34BoANyJdQDrgWUA5INsAOiB
        agDtgWkA7oRpAO2FbQDmim4A7YpuAPKBZQD5gWYA/IFmAPKCagD3g2oA9YVqAPGHbAD2hWwA+YJpAPiF
        awD5hm0A/oZtAPGJbQD5im4A/ohvAOKFcQDrhXAA5ohwAOmIcADtinMA6Y1zAOqKdgDtinUA7Y12AO2N
        eQDqj30A8opxAPWJcwDzjHMA945zAPONdAD0jnYA+YtxAP6JcAD8jHIA+It0AP2NdQD1j3kA/Y94AO+U
        eQDukX0A8pF5APWSeQD1k34A9JZ+AP6SewD/k30A+ZV9AP+VfwB0Y80AdWLUAHtp1AB2Y9gAeWbaAHxq
        2gB3ZeEAfGrpAKd3sgCOb8oAgHDPAIBv3wCBcdAAg3HbAIh32gCGed4Ai37eAIBt5QCEc+IAiHfkAId5
        4ACLeuMAhHHsAIh16ACQfu0A35SBAN+aiADQi5oA45eEAOqUgQDtloEA7peEAOWYgwDtmYQA7p+MAPSX
        gAD7l4EA/paAAPOZgwDxmYUA9ZuHAPmZgQD+mIIA+ZmEAP6ahQD9nIcA8Z+LAPueiQD9nYkA5JmWAOGW
        mADuo4wA9qKOAP6hjQD6pI4A/KSOAOOhkADspJQA7K2eAPSkkQD5pZAA/qSRAPSplgD5qZUA/qmVAPSs
        mwD5q5kA/aqZAP6smQD4r58A/a6cAP+xnwDAhakA2Z6uAMuPtgDdoqQA0qy6AOmpqwDyqqAA7rOlAOGx
        qQDysqQA/bGhAPm2pQD9tqYA+LinAPm3qQDzuqwA+7usAOu9sgD2v7EA/r6wAPTBswD7wbUA88W7AP7G
        uQD3yL4AkYTeAKSL3ACslNoAqJzdALCn3AC0q90AjoDhAJOF4wCfheQAlonkAJuN5ACUhOoAmIftAJuM
        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
        Af//AP///4H////j////////
</value>
  </data>
</root>